<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- 해당 파일에 모든 쿼리문을 작성 -->
<mapper namespace="orderMapper">

    <!--상품-->
    <resultMap id="supply" type="com.green.TeamProject2.orders.vo.SupplyVO">
        <id column="SUPPLY_NUM" property="supplyNum"/>
        <result column="SUPPLY_NAME" property="supplyName"/>
        <result column="SUPPLY_PRICE" property="supplyPrice"/>
        <result column="SUPPLY_STANDARD" property="supplyStandard"/>
        <result column="SUPPLIER" property="supplier"/>
        <result column="SUPPLY_CAUTION" property="supplyCaution"/>
        <result column="TOTAL_SUPPLY_CNT" property="totalSupplyCnt"/>
        <collection property="contractList" resultMap="contract"/>
    </resultMap>

    <!--상품 상세 정보-->
    <resultMap id="contract" type="com.green.TeamProject2.orders.vo.ContractVO">
        <id column="CONTRACT_NUM" property="contractNum"/>
        <result column="SUPPLY_NUM" property="supplyNum"/>
        <result column="CONTRACT_DATE" property="contractDate"/>
        <result column="CONTRACT_AMOUNT" property="contractAmount"/>
    </resultMap>

    <!--상품 등록-->
    <insert id="regSupply">
        INSERT INTO SUPPLY
        (SUPPLY_NAME
        , SUPPLY_PRICE
        , SUPPLY_STANDARD
        , SUPPLIER
        , SUPPLY_CAUTION
        )
        VALUES
        (#{supplyName}
        , #{supplyPrice}
        , #{supplyStandard}
        , #{supplier}
        , #{supplyCaution}
        )
    </insert>

    <!--상품 리스트-->
    <select id="getSupplyList" resultMap="supply">
        SELECT *
        FROM SUPPLY
        LEFT JOIN CONTRACT
        ON SUPPLY.SUPPLY_NUM = CONTRACT.SUPPLY_NUM
    </select>

    <!--상품 삭제-->
    <delete id="deleteSupply">
        DELETE
        FROM SUPPLY
        WHERE SUPPLY_NUM = #{supplyNum}
    </delete>

    <!--상품 수정-->
    <update id="updateSupply">
        UPDATE SUPPLY
        SET SUPPLY_NAME = #{supplyName}
        , SUPPLY_PRICE = #{supplyPrice}
        , SUPPLY_STANDARD = #{supplyStandard}
        , SUPPLIER = #{supplier}
        , SUPPLY_CAUTION = #{supplyCaution}
        WHERE SUPPLY_NUM = #{supplyNum}
    </update>


    <!-- 상세 정보 리스트 -->
    <select id="detailList" resultMap="supply">
        SELECT *
        FROM SUPPLY
        INNER JOIN CONTRACT ON SUPPLY.SUPPLY_NUM = CONTRACT.SUPPLY_NUM
        WHERE SUPPLY.SUPPLY_NUM = #{supplyNum}
        AND CONTRACT.CONTRACT_AMOUNT > 0
        ORDER BY CONTRACT.CONTRACT_DATE
    </select>


    <!--상품 상세 정보 추가-->
    <insert id="regDetailContract">
        INSERT INTO CONTRACT
        (CONTRACT_DATE
        , SUPPLY_NUM
        , CONTRACT_AMOUNT
        )
        VALUES
        (#{contractDate}
        , #{supplyNum}
        , #{contractAmount}
        )
        <!--동일 날짜에 들어온 동일 상품의 재고는 하나로 만들어라-->
        ON DUPLICATE KEY UPDATE
        CONTRACT_AMOUNT = CONTRACT_AMOUNT + VALUES(CONTRACT_AMOUNT)
    </insert>

    <!--상품 상세 정보 수정-->
    <update id="updateDetailContract">
        UPDATE CONTRACT
        SET
        CONTRACT_DATE = #{contractDate}
        , CONTRACT_AMOUNT = #{contractAmount}
        WHERE CONTRACT_NUM = #{contractNum}
    </update>

    <!--상품 상세 정보 삭제-->
    <delete id="deleteDetail">
        DELETE
        FROM CONTRACT
        WHERE CONTRACT_NUM = #{contractNum}
    </delete>

    <!--상품의 주문된 날짜만 뽑아 오기-->
    <select id="getSupplyDate" resultMap="supply">
        SELECT *
        FROM supply, CONTRACT
        WHERE supply.SUPPLY_NUM = CONTRACT.SUPPLY_NUM
        AND supply.SUPPLY_NUM = #{supplyNum}
        ORDER BY CONTRACT_DATE
    </select>

    <!--거래처-->
    <resultMap id="customer" type="com.green.TeamProject2.orders.vo.CustomerVO">
        <id column="CUSTOMER_NUM" property="customerNum"/>
        <result column="CUSTOMER_LI" property="customerLi"/>
        <result column="CUSTOMER_NAME" property="customerName"/>
        <result column="CUSTOMER_HEAD_NAME" property="customerHeadName"/>
        <result column="CUSTOMER_ADDRESS" property="customerAddress"/>
        <result column="CUSTOMER_TEL" property="customerTel"/>
        <result column="CUSTOMER_EMAIL" property="customerEmail"/>
        <result column="CUSTOMER_ETC" property="customerEtc"/>
    </resultMap>

    <!--거래처 등록-->
    <insert id="regCustomer">
        INSERT INTO CUSTOMER
        (CUSTOMER_LI
        , CUSTOMER_NAME
        , CUSTOMER_HEAD_NAME
        , CUSTOMER_ADDRESS
        , CUSTOMER_TEL
        , CUSTOMER_EMAIL
        , CUSTOMER_ETC
        )
        VALUES
        (#{customerLi}
        , #{customerName}
        , #{customerHeadName}
        , #{customerAddress}
        , #{customerTel}
        , #{customerEmail}
        , #{customerEtc}
        )
    </insert>

    <!--거래처 리스트-->
    <select id="getCustomerList" resultMap="customer">
        SELECT *
        FROM CUSTOMER
    </select>

    <!--거래처 삭제-->
    <delete id="deleteCustomer">
        DELETE
        FROM CUSTOMER
        WHERE CUSTOMER_NUM = #{customerNum}
    </delete>

    <!--거래처 수정-->
    <update id="updateCustomer">
        UPDATE CUSTOMER
        SET CUSTOMER_LI = #{customerLi}
        , CUSTOMER_NAME = #{customerName}
        , CUSTOMER_HEAD_NAME = #{customerHeadName}
        , CUSTOMER_ADDRESS = #{customerAddress}
        , CUSTOMER_TEL = #{customerTel}
        , CUSTOMER_EMAIL = #{customerEmail}
        , CUSTOMER_ETC = #{customerEtc}
        WHERE CUSTOMER_NUM = #{customerNum}
    </update>

    <!--발주된 주문서 리스트-->
    <resultMap id="orderForm" type="com.green.TeamProject2.orders.vo.OrderFormVO">
        <id column="ORDER_NUM" property="orderNum"/>
        <result column="ORDER_DATE" property="orderDate"/>
        <result column="CUSTOMER_NUM" property="customerNum"/>
        <result column="ORDER_MANAGER" property="orderManager"/>
        <result column="ORDER_STATUS" property="orderStatus"/>
        <association property="customerVO" resultMap="customer"/>
        <collection property="detailOrderList" resultMap="detailOrderForm"/>
    </resultMap>

    <!--완료된 주문서 리스트-->
    <resultMap id="doneForm" type="com.green.TeamProject2.orders.vo.DoneFormVO">
        <id column="DONE_NUM" property="doneNum"/>
        <result column="ORDER_NUM" property="orderNum"/>
        <result column="DONE_DATE" property="doneDate"/>
        <result column="DONE_MANAGER" property="doneManager"/>
        <association property="orderFormList" resultMap="orderForm"/>
    </resultMap>

    <!--주문서 얻기-->
    <select id="getOrderForm" resultMap="orderForm">
        SELECT *
        FROM ORDER_FORM, CUSTOMER, DETAIL_ORDER_FORM, SUPPLY
        WHERE ORDER_FORM.ORDER_NUM = DETAIL_ORDER_FORM.ORDER_NUM
        AND ORDER_FORM.CUSTOMER_NUM = CUSTOMER.CUSTOMER_NUM
        AND SUPPLY.SUPPLY_NUM = DETAIL_ORDER_FORM.SUPPLY_NUM
        AND ORDER_FORM.ORDER_STATUS = 'NONE'
        ORDER BY ORDER_FORM.ORDER_NUM, SUPPLY.SUPPLY_NUM
    </select>

    <!--처리에 실패한 주문서 얻기-->
    <select id="getFailOrderForm" resultMap="orderForm">
        SELECT *
        FROM ORDER_FORM, CUSTOMER, DETAIL_ORDER_FORM, SUPPLY
        WHERE ORDER_FORM.ORDER_NUM = DETAIL_ORDER_FORM.ORDER_NUM
        AND ORDER_FORM.CUSTOMER_NUM = CUSTOMER.CUSTOMER_NUM
        AND SUPPLY.SUPPLY_NUM = DETAIL_ORDER_FORM.SUPPLY_NUM
        AND ORDER_FORM.ORDER_STATUS = 'FAIL'
        ORDER BY ORDER_FORM.ORDER_NUM, SUPPLY.SUPPLY_NUM
    </select>

    <update id="regFailAfter">
        UPDATE ORDER_FORM
        SET ORDER_STATUS = 'FAIL'
        WHERE ORDER_NUM = #{orderNum}
    </update>

    <!--처리 된 주문서 얻기-->
    <select id="getDoneForm" resultMap="doneForm">
        SELECT *
        FROM ORDER_FORM, DONE_FORM, DETAIL_ORDER_FORM, customer, SUPPLY
        WHERE ORDER_FORM.ORDER_NUM = DONE_FORM.ORDER_NUM
        AND order_form.ORDER_NUM = DETAIL_ORDER_FORM.ORDER_NUM
        AND order_form.CUSTOMER_NUM = customer.CUSTOMER_NUM
        AND SUPPLY.SUPPLY_NUM = DETAIL_ORDER_FORM.SUPPLY_NUM
        AND ORDER_FORM.ORDER_STATUS = 'DONE'
        ORDER BY DONE_NUM DESC, SUPPLY.SUPPLY_NUM
    </select>

    <!--처리 주문서 등록 후 -->
    <insert id="regDoneForm">
        INSERT INTO DONE_FORM
        (ORDER_NUM
        , DONE_MANAGER
        )
        VALUES
        (#{orderNum}
        , #{doneManager}
        )
    </insert>

    <!--상태 'DONE'으로 업데이트-->
    <update id="regDoneAfter">
        UPDATE ORDER_FORM
        SET ORDER_STATUS = 'DONE'
        WHERE ORDER_NUM = #{orderNum}
    </update>

    <!--상태가 FAIL인 것 들을 다시 NONE으로 업데이트-->
    <update id="failToNone">
        UPDATE ORDER_FORM
        SET ORDER_STATUS = 'NONE'
        WHERE ORDER_NUM IN (
            SELECT ORDER_NUM
            FROM ORDER_FORM
            WHERE ORDER_STATUS = 'FAIL'
        )
    </update>

  <!--  &lt;!&ndash;리스트 옮기면 재고에서 제품을 빼주는 업데이트-->
    <update id="regDoneMange">
        UPDATE CONTRACT
        SET CONTRACT_AMOUNT = #{cnt}
        WHERE CONTRACT_NUM = (
            <!--먼저 오래된 순서부터 재고 수를 찾아야함-->
            SELECT CONTRACT_NUM
            FROM CONTRACT
            WHERE SUPPLY_NUM = #{supplyNum}
            ORDER BY CONTRACT_DATE
            LIMIT 1  offset #{offset}
        )
    </update>

    <!--전체 재고 목록에서 리스트-->
    <select id="getOneRemain" resultMap="contract">
        SELECT *
        FROM CONTRACT
        WHERE SUPPLY_NUM = #{supplyNum}
        AND CONTRACT_AMOUNT > 0
        ORDER BY CONTRACT_DATE
    </select>

    <!--전체 재고 목록에서 각각의 재고를 하나씩 리스트로-->
    <select id="getOneCnt" resultType="int">
        SELECT CONTRACT_AMOUNT
        FROM CONTRACT
        WHERE SUPPLY_NUM = #{supplyNum}
        ORDER BY CONTRACT_DATE
    </select>

    <!--주문서 상세 정보-->
    <resultMap id="detailOrderForm" type="com.green.TeamProject2.orders.vo.DetailOrderFormVO">
        <id column="DETAIL_ORDER_NUM" property="detailOrderNum"/>
        <result column="ORDER_NUM" property="orderNum"/>
        <result column="SUPPLY_NUM" property="supplyNum"/>
        <result column="ORDER_AMOUNT" property="orderAmount"/>
        <result column="TOTAL_PRICE" property="totalPrice"/>
        <collection property="supplyVO" resultMap="supply"/>
    </resultMap>

    <!--부족 수량 정보-->
    <resultMap id="needForm" type="com.green.TeamProject2.orders.vo.NeedFormVO">
        <id column="NEED_NUM" property="needNum"/>
        <result column="SUPPLY_NUM" property="supplyNum"/>
        <result column="ORDER_NUM" property="orderNum"/>
        <result column="NEED_CNT" property="needCnt"/>
        <result column="NEED_STATUS" property="needStatus"/>
        <result column="TOTAL_CNT" property="totalCnt"/>
        <association property="supplyVO" resultMap="supply"/>
        <collection property="orderFormList" resultMap="orderForm"/>
    </resultMap>

    <!--부족 수량 리스트 얻기-->
    <select id="getNeedForm" resultMap="needForm">
        SELECT *
        FROM NEED_FORM, SUPPLY, ORDER_FORM
        WHERE NEED_FORM.SUPPLY_NUM = SUPPLY.SUPPLY_NUM
        AND NEED_FORM.ORDER_NUM = ORDER_FORM.ORDER_NUM
        AND NEED_FORM.NEED_STATUS = 'TRUE'
    </select>

    <!--부족 수량 상태가 FALSE 인 리스트 얻기-->
    <select id="getNeedFalseForm" resultMap="needForm">
        SELECT NEED_FORM.SUPPLY_NUM, SUM(NEED_FORM.NEED_CNT) AS TOTAL_CNT, SUPPLY.SUPPLY_NAME
        FROM NEED_FORM, SUPPLY, ORDER_FORM
        WHERE NEED_FORM.SUPPLY_NUM = SUPPLY.SUPPLY_NUM
        AND NEED_FORM.ORDER_NUM = ORDER_FORM.ORDER_NUM
        AND NEED_FORM.NEED_STATUS = 'FALSE'
        GROUP BY NEED_FORM.SUPPLY_NUM;
    </select>

    <!--부족한 수량의 상태 FALSE 변경-->
    <update id="updateFalseAfter">
        UPDATE NEED_FORM
        SET NEED_STATUS = 'FALSE'
    </update>

    <!--부족한 수량의 상태 변경-->
    <update id="updateNoneAfter">
        UPDATE NEED_FORM
        SET NEED_STATUS = 'NONE'
    </update>

    <!--false인 부족 수량 정보를 토대로 상세 등록-->
    <insert id="needToContract">
        INSERT INTO CONTRACT
        (
        SUPPLY_NUM
        , CONTRACT_AMOUNT
        )
        VALUES
        (
        #{supplyNum}
        , #{contractAmount}
        )
        ON DUPLICATE KEY UPDATE
        CONTRACT_AMOUNT = CONTRACT_AMOUNT + VALUES(CONTRACT_AMOUNT)
    </insert>

    <!--부족 수량 저장-->
    <insert id="regNeedForm">
        INSERT INTO NEED_FORM
        (
        NEED_CNT
        , SUPPLY_NUM
        , ORDER_NUM
        )
        VALUES
        (
        #{needCnt}
        , #{supplyNum}
        , #{orderNum}
        )
    </insert>

</mapper>































